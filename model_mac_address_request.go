/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2-beta1 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the MACAddressRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MACAddressRequest{}

// MACAddressRequest Adds support for custom fields and tags.
type MACAddressRequest struct {
	MacAddress           string         `json:"mac_address"`
	AssignedObjectType   NullableString `json:"assigned_object_type,omitempty"`
	Description          *string        `json:"description,omitempty"`
	Comments             *string        `json:"comments,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MACAddressRequest MACAddressRequest

// NewMACAddressRequest instantiates a new MACAddressRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMACAddressRequest(macAddress string) *MACAddressRequest {
	this := MACAddressRequest{}
	this.MacAddress = macAddress
	return &this
}

// NewMACAddressRequestWithDefaults instantiates a new MACAddressRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMACAddressRequestWithDefaults() *MACAddressRequest {
	this := MACAddressRequest{}
	return &this
}

// GetMacAddress returns the MacAddress field value
func (o *MACAddressRequest) GetMacAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value
// and a boolean to check if the value has been set.
func (o *MACAddressRequest) GetMacAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MacAddress, true
}

// SetMacAddress sets field value
func (o *MACAddressRequest) SetMacAddress(v string) {
	o.MacAddress = v
}

// GetAssignedObjectType returns the AssignedObjectType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MACAddressRequest) GetAssignedObjectType() string {
	if o == nil || IsNil(o.AssignedObjectType.Get()) {
		var ret string
		return ret
	}
	return *o.AssignedObjectType.Get()
}

// GetAssignedObjectTypeOk returns a tuple with the AssignedObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MACAddressRequest) GetAssignedObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssignedObjectType.Get(), o.AssignedObjectType.IsSet()
}

// HasAssignedObjectType returns a boolean if a field has been set.
func (o *MACAddressRequest) HasAssignedObjectType() bool {
	if o != nil && o.AssignedObjectType.IsSet() {
		return true
	}

	return false
}

// SetAssignedObjectType gets a reference to the given NullableString and assigns it to the AssignedObjectType field.
func (o *MACAddressRequest) SetAssignedObjectType(v string) {
	o.AssignedObjectType.Set(&v)
}

// SetAssignedObjectTypeNil sets the value for AssignedObjectType to be an explicit nil
func (o *MACAddressRequest) SetAssignedObjectTypeNil() {
	o.AssignedObjectType.Set(nil)
}

// UnsetAssignedObjectType ensures that no value is present for AssignedObjectType, not even an explicit nil
func (o *MACAddressRequest) UnsetAssignedObjectType() {
	o.AssignedObjectType.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MACAddressRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MACAddressRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MACAddressRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MACAddressRequest) SetDescription(v string) {
	o.Description = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *MACAddressRequest) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MACAddressRequest) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *MACAddressRequest) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *MACAddressRequest) SetComments(v string) {
	o.Comments = &v
}

func (o MACAddressRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MACAddressRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mac_address"] = o.MacAddress
	if o.AssignedObjectType.IsSet() {
		toSerialize["assigned_object_type"] = o.AssignedObjectType.Get()
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MACAddressRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mac_address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMACAddressRequest := _MACAddressRequest{}

	err = json.Unmarshal(data, &varMACAddressRequest)

	if err != nil {
		return err
	}

	*o = MACAddressRequest(varMACAddressRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mac_address")
		delete(additionalProperties, "assigned_object_type")
		delete(additionalProperties, "description")
		delete(additionalProperties, "comments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMACAddressRequest struct {
	value *MACAddressRequest
	isSet bool
}

func (v NullableMACAddressRequest) Get() *MACAddressRequest {
	return v.value
}

func (v *NullableMACAddressRequest) Set(val *MACAddressRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMACAddressRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMACAddressRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMACAddressRequest(val *MACAddressRequest) *NullableMACAddressRequest {
	return &NullableMACAddressRequest{value: val, isSet: true}
}

func (v NullableMACAddressRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMACAddressRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
